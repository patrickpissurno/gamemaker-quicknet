<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = "";
ip = "";
port = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(mode){
    case "":
        if(keyboard_check_released(ord('1')))
            mode = "host";
        else if(keyboard_check_released(ord('2')))
            mode = "client";
        break;
    case "host":
        //TODO: handle text input and read it into the port variable
        
        if(keyboard_check_released(vk_enter)){
            if(port == "")
                port = "25565";
                
            global.ip = "0.0.0.0";
            global.port = port;
            room_goto(r_host);
        }
        else if(keyboard_check_released(vk_escape)){
            mode = "";
            ip = "";
            port = "";
        }
        else
            port = get_keyboard_input(port, 5);
        break;
    case "client":
        //TODO: handle text input and read it into the ip variable
        
        if(keyboard_check_released(vk_enter)){
            if(ip == "")
                ip = "127.0.0.1";
            mode = "client_port";
        }
        else if(keyboard_check_released(vk_escape)){
            mode = "";
            ip = "";
            port = "";
        }
        else
            ip = get_keyboard_input(ip, 15);
        break;
    case "client_port":
        //TODO: handle text input and read it into the port variable
        
        if(keyboard_check_released(vk_enter)){
            if(port == "")
                port = "25565";
                
            global.ip = ip;
            global.port = port;
            room_goto(r_client);
        }
        else if(keyboard_check_released(vk_escape))
            mode = "client";
        else
            port = get_keyboard_input(port, 5);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(f_arial_18);

var hint_text = "Press [ENTER] to continue, [ESC] to go back";
var hint_text_margin = 20;

switch(mode){
    case "":
        draw_text(room_width / 2, room_height / 2, "Press 1 to host a game#Press 2 to join a game");
        break;
    case "host":
        draw_text(room_width / 2, room_height / 2, "Hosting game##Enter the desired port: " + port + get_text_cursor());
        draw_set_valign(fa_bottom);
        draw_text(room_width / 2, room_height - hint_text_margin, hint_text);
        break;
    case "client":
        draw_text(room_width / 2, room_height / 2, "Joining game##Enter the IP address: " + ip + get_text_cursor());
        draw_set_valign(fa_bottom);
        draw_text(room_width / 2, room_height - hint_text_margin, hint_text);
        break;
    case "client_port":
        draw_text(room_width / 2, room_height / 2, "Joining game##IP address: " + ip + "#Enter the port number: " + port + get_text_cursor());
        draw_set_valign(fa_bottom);
        draw_text(room_width / 2, room_height - hint_text_margin, hint_text);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
